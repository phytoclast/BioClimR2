Norm == selectClim
)
selectClim <- subset(Biomeclimate, grepl('Southern Great Lakes forests', ECO_NAME)& Norm %in% '1990')
#add alternative selection of external data to supplement elevation range for elevation graph. Must be processed like primary, but not used in other graphs.
selecty <- mean(selectClim$Latitude)
selectx <- mean(selectClim$Longitude)
selectz <- mean(selectClim$Elevation)
selectNorm <- selectClim$Norm[1]
selectClim2 <- subset(Biomeclimate,
Latitude >= selecty - 5 &
Latitude <= selecty + 5 &
Longitude >= selectx - 7 &
Longitude <= selectx + 7&
Norm == selectClim
)
selectClim2$wts <- 0.1/(((selectClim2$Latitude - selecty)^2 + (selectClim2$Longitude - selectx)^2)^0.5+5)#give less weight for more distant points.
selectClim$wts <- 1 #Full weight for primary internal data.
selectClim <- rbind(selectClim, selectClim2)
rm(selectClim2)
selectMonthly <- selectClim[selectClim$wts >=1,c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude","Elevation","t01","tl01","th01","p01","e01")]
colnames(selectMonthly) <- c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude","Elevation","t","tl","th","p","e")
selectMonthly$Month<- 1
View(selectMonthly)
runApp('BioClimR')
runApp('BioClimR')
selectClim <- subset(Biomeclimate, grepl('Southern Great Lakes forests', ECO_NAME)& Norm %in% '1990')
#add alternative selection of external data to supplement elevation range for elevation graph. Must be processed like primary, but not used in other graphs.
selecty <- mean(selectClim$Latitude)
selectx <- mean(selectClim$Longitude)
selectz <- mean(selectClim$Elevation)
selectNorm <- selectClim$Norm[1]
selectClim2 <- subset(Biomeclimate,
Latitude >= selecty - 5 &
Latitude <= selecty + 5 &
Longitude >= selectx - 7 &
Longitude <= selectx + 7&
Norm == selectNorm
)
selectClim2$wts <- 0.1/(((selectClim2$Latitude - selecty)^2 + (selectClim2$Longitude - selectx)^2)^0.5+5)#give less weight for more distant points.
selectClim$wts <- 1 #Full weight for primary internal data.
selectClim <- rbind(selectClim, selectClim2)
rm(selectClim2)
#Make Monthly Rows
#Jan
selectMonthly <- selectClim[selectClim$wts >=1,c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude","Elevation","t01","tl01","th01","p01","e01")]
colnames(selectMonthly) <- c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude","Elevation","t","tl","th","p","e")
selectMonthly$Month<- 1
#Feb-Dec
for (i in 1:11){
selectMonthlyA <- selectClim[selectClim$wts >=1,c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude", "Elevation",
colnames(selectClim)[which(colnames(selectClim)=='t01')+i],
colnames(selectClim)[which(colnames(selectClim)=='tl01')+i],
colnames(selectClim)[which(colnames(selectClim)=='th01')+i],
colnames(selectClim)[which(colnames(selectClim)=='p01')+i],
colnames(selectClim)[which(colnames(selectClim)=='e01')+i])]
colnames(selectMonthlyA)<- c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude","Elevation","t","tl","th","p","e")
selectMonthlyA$Month<- i+1
selectMonthly <- rbind(selectMonthly, selectMonthlyA)
}
View(selectMonthly)
runApp('BioClimR')
View(selectMonthly)
rm(selectMonthlyA)
sumMonthly <- ddply(selectMonthly, "Month", summarise,
t25 = quantile(t, 0.25), t75 = quantile(t, 0.75), t = mean(t),
p25 = quantile(p, 0.25), p75 = quantile(p, 0.75), p = mean(p),
e = mean(e), tl = mean(tl), th = mean(th))
View(sumMonthly)
runApp('BioClimR')
selectClim <- subset(Biomeclimate, grepl('Southern Great Lakes forests', ECO_NAME)& Norm %in% '1990')
#add alternative selection of external data to supplement elevation range for elevation graph. Must be processed like primary, but not used in other graphs.
selecty <- mean(selectClim$Latitude)
selectx <- mean(selectClim$Longitude)
selectz <- mean(selectClim$Elevation)
selectNorm <- selectClim$Norm[1]
selectClim2 <- subset(Biomeclimate,
Latitude >= selecty - 5 &
Latitude <= selecty + 5 &
Longitude >= selectx - 7 &
Longitude <= selectx + 7&
Norm == selectNorm
)
selectClim2$wts <- 0.1/(((selectClim2$Latitude - selecty)^2 + (selectClim2$Longitude - selectx)^2)^0.5+5)#give less weight for more distant points.
selectClim$wts <- 1 #Full weight for primary internal data.
selectClim <- rbind(selectClim, selectClim2)
rm(selectClim2)
#Make Monthly Rows
#Jan
selectMonthly <- selectClim[selectClim$wts >=1,c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude","Elevation","t01","tl01","th01","p01","e01")]
colnames(selectMonthly) <- c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude","Elevation","t","tl","th","p","e")
selectMonthly$Month<- 1
#Feb-Dec
for (i in 1:11){
selectMonthlyA <- selectClim[selectClim$wts >=1,c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude", "Elevation",
colnames(selectClim)[which(colnames(selectClim)=='t01')+i],
colnames(selectClim)[which(colnames(selectClim)=='tl01')+i],
colnames(selectClim)[which(colnames(selectClim)=='th01')+i],
colnames(selectClim)[which(colnames(selectClim)=='p01')+i],
colnames(selectClim)[which(colnames(selectClim)=='e01')+i])]
colnames(selectMonthlyA)<- c("ECO_ID","ECO_NAME","BIOME","Latitude","Longitude","Elevation","t","tl","th","p","e")
selectMonthlyA$Month<- i+1
selectMonthly <- rbind(selectMonthly, selectMonthlyA)
}
rm(selectMonthlyA)
sumMonthly <- ddply(selectMonthly, "Month", summarise,
t25 = quantile(t, 0.25), t75 = quantile(t, 0.75), t = mean(t),
p25 = quantile(p, 0.25), p75 = quantile(p, 0.75), p = mean(p),
e = mean(e), tl = mean(tl), th = mean(th))
selectClim$PPETRatio <- selectClim$P/(selectClim$Deficit + selectClim$P - selectClim$Surplus +0.0001)
selectClim$Mindex <- selectClim$PPETRatio/(selectClim$PPETRatio+1)
graphymax = input$lat[2]#max(selectClim$Latitude)+10#
graphymin = input$lat[1]#min(selectClim$Latitude)-10#
graphxmax = input$lon[2]#max(selectClim$Longitude)+10#
graphxmin = input$lon[1]#min(selectClim$Longitude)-10#
selectClim$SP1 <- round(ifelse(selectClim$PPETRatio < 0.5 & selectClim$Surplus < 25 & selectClim$pAET < 75, pmax(selectClim$Surplus/25, selectClim$pAET/75)  ,1),15)
selectClim$SP2 <- round(ifelse(selectClim$SP1 >= 1, ifelse(selectClim$pAET < 75 & (selectClim$Deficit >= 150 | selectClim$PPETRatio < 1), pmax(selectClim$pAET/75, 150/(selectClim$Deficit+150)),1),0),15)
selectClim$SP3 <- round(ifelse(selectClim$SP2 >= 1, ifelse(selectClim$Deficit >= 150 | selectClim$PPETRatio < 1, pmax(150/(selectClim$Deficit+150)),1),0),15)
selectClim$SP4 <- round(ifelse(selectClim$SP3 >= 1, pmin(1-selectClim$Deficit/150),0),15)
selectClim$SPindex <- selectClim$SP1 + selectClim$SP2 + selectClim$SP3 + selectClim$SP4 + 1 #Seasonal precipitation index
selectClim$Cindex <- pmin(selectClim$Tclx+15, selectClim$Tc) #Cold index
selectClim$Dindex <- selectClim$Deficit/(selectClim$Deficit + 100)
selectClim$Sindex <- selectClim$Surplus/(selectClim$Surplus + 100)
selectClim$Aindex <- selectClim$pAET/(selectClim$pAET + 100)
#Swap out the external data to a seperate data frame and retain internal data for all but elevation graph.
selectClim2<- selectClim
selectClim <- selectClim[selectClim$wts >=1,]
T <- apply(selectClim[,c('t01', 't02', 't03', 't04', 't05', 't06', 't07', 't08', 't09', 't10', 't11', 't12')], MARGIN=c(2), na.rm=TRUE, FUN='mean')
E <- apply(selectClim[,c('e01', 'e02', 'e03', 'e04', 'e05', 'e06', 'e07', 'e08', 'e09', 'e10', 'e11', 'e12')], MARGIN=c(2), na.rm=TRUE, FUN='mean')
P <- apply(selectClim[,c('p01', 'p02', 'p03', 'p04', 'p05', 'p06', 'p07', 'p08', 'p09', 'p10', 'p11', 'p12')], MARGIN=c(2), na.rm=TRUE, FUN='mean')
MAAT <- mean(T)
Elev<-mean(selectClim$Elevation, na.rm=TRUE)
Lat<-mean(selectClim$Latitude, na.rm=TRUE)
Lon<-mean(selectClim$Longitude, na.rm=TRUE)
PET<-sum(E, na.rm=TRUE)
MAP<-sum(P, na.rm=TRUE)
PPETRatio<-MAP/(PET+0.0001)
Deficit <- mean(selectClim$Deficit, na.rm=TRUE)
Surplus <- mean(selectClim$Surplus, na.rm=TRUE)
SummerBioT<-mean(selectClim$Tg, na.rm=TRUE)
peakAET <- mean(selectClim$pAET, na.rm=TRUE)
Tw<-mean(selectClim$Tw, na.rm=TRUE)
Twh<-mean(selectClim$Twh, na.rm=TRUE)
Tc<-mean(selectClim$Tc, na.rm=TRUE)
Tcl<-mean(selectClim$Tcl, na.rm=TRUE)
Tclx <- mean(selectClim$Tclx, na.rm=TRUE)
#Key to climate type_____________________________________________________
Seasonalilty <- ifelse(Deficit < 150 & PPETRatio>=1, "Isopluvial",
ifelse(Surplus < 25 & PPETRatio < 0.5 & peakAET < 75, "Isoxeric",
ifelse(peakAET < 75,"Xerothermic","Pluviothermic")))
MRegime <- ifelse(PPETRatio>=2,"Perhumid",
ifelse(PPETRatio>=1.414,"Moist-Humid",
ifelse(PPETRatio>=1,"Dry-Humid",
ifelse(PPETRatio>=0.707,"Moist-Subhumid",
ifelse(PPETRatio>=0.5,"Dry-Subhumid",
ifelse(PPETRatio>=0.25,"Semiarid",
ifelse(PPETRatio>=0.125,"Arid","Perarid"
)))))))
BioTemperatureC <-
ifelse(Tc >= 20 & Tclx >=5,"Meso-Tropical",
ifelse(Tc >= 15 & Tclx >=0,"Cryo-Tropical",
ifelse(Tc >= 10 & Tclx >=-5,"Thermo-Sutropical",
ifelse(Tc >= 5 & Tclx >=-10,"Meso-Subtropical",
ifelse(Tc >= 0 & Tclx >=-15,"Cryo-Subtropical",
ifelse(Tc >= -5 & Tclx >=-20,"Thermo-Temperate",
ifelse(Tc >= -10 & Tclx >=-25,"Meso-Temperate",
ifelse(Tc >= -25 & Tclx >=-40,"Cryo-Temperate","Polar"
))))))))
BioTemperatureW <- ifelse(SummerBioT >= 24,"Hot (Lowland)",
ifelse(SummerBioT >= 18,"Warm (Premontane)",
ifelse(SummerBioT >= 15,"Warm-Mild (Lower-Montane)",
ifelse(SummerBioT >= 12,"Cool-Mild (Upper-Montane)",
ifelse(SummerBioT >= 6,"Cool (Subalpine)","Cold (Alpine)"
)))))
Climatetext<-paste(BioTemperatureW," ",BioTemperatureC,", ",MRegime," ",Seasonalilty, sep="" )
wmod <- lm(Tg ~ Elevation + Latitude + Longitude, weight = selectClim2$wts,data = selectClim2)
cmod <- lm(Cindex ~ Elevation + Latitude + Longitude, weight = selectClim2$wts, data = selectClim2)
df <- selectClim2
df$wfit <- predict.lm(wmod, df)
df$cfit <- predict.lm(cmod, df)
df$Latitude <- selecty
df$Longitude <-  selectx
df$wfit2 <- predict.lm(wmod, df)
df$cfit2 <- predict.lm(cmod, df)
df$Tg <-  df$Tg + (df$wfit2 - df$wfit)
df$Cindex <-  df$Cindex + (df$cfit2 - df$cfit)
subzero <- data.frame(y=c(0,0,-40,-40), x=c(-1000,9000,9000,-1000))#Make a rectangle to mark limit of growing season curve validity.
climelev <-  ggplot() +
geom_point(mapping=aes(y=c(-1000,8000), x=c(-1000,8000)), size=0)+#increase range of graph for extrapolation
geom_polygon(data=subzero, mapping=aes(x=x, y=y),fill='lightcyan', alpha = 0.8)+
stat_smooth(data=df, mapping=aes(y=Tg, x=Elevation, weight = df$wts, color='Growing Season'), method='lm', formula='y~x', fullrange = TRUE, size=0.5)+
stat_smooth(data=df, mapping=aes(y=Cindex, x=Elevation, weight = df$wts, color='Winter'), method='lm', formula='y~x', fullrange = TRUE, size=0.5)+
geom_point(data=selectClim, mapping=aes(y=Tg, x=Elevation, shape='Growing Season', color='Growing Season'), size=1.5, alpha=9/(nrow(selectClim)+9)+1/10)+
geom_point(data=selectClim, mapping=aes(y=Cindex, x=Elevation, shape='Winter', color='Winter'), size=1.5, alpha=9/(nrow(selectClim)+9)+1/10)+
scale_x_continuous(name= "Elevation",
breaks=c(-500,0, 500,1000,1500,2000,2500,3000,3500,4000,4500,5000,6000,8000))+
scale_y_continuous(name= "Temperature", breaks=c(-25,-10,0,6,12,18,24,30,36))+
coord_fixed(ratio = 1000/15,xlim = c(-500,5000), ylim = c(-30, 33))+
labs(title = paste("Climate of ",selectClim[1,]$ECO_NAME, sep=""))+
theme_bw()+
scale_shape_manual("",values = c("Winter" = 6, "Growing Season"=2))+
scale_color_manual("",values = c("Winter" = 'blue', "Growing Season"='red'))+
theme(legend.position="bottom",axis.text.x = element_text(angle = 90, vjust = 0, hjust = 0),
panel.grid.major = element_line( colour = 'black', size = 0.1), panel.grid.minor = element_blank())
climelev
runApp('BioClimR')
runApp('BioClimR')
shiny::runApp('BioClimR')
shiny::runApp('BioClimR')
shiny::runApp('MLRAClimate')
runApp('BioClimR')
shiny::runApp('BioClimR')
install.packages(c("BH", "callr", "caTools", "classInt", "clipr", "curl", "data.table", "dplyr", "e1071", "evaluate", "forcats", "glue", "haven", "Hmisc", "httpuv", "jsonlite", "knitr", "later", "lazyeval", "lme4", "maptools", "modelr", "multcomp", "mvtnorm", "openssl", "permute", "pillar", "polspline", "processx", "purrr", "quantreg", "R6", "raster", "RcppEigen", "RCurl", "readr", "readxl", "rgdal", "rio", "rlang", "rmarkdown", "rms", "rsconnect", "rstudioapi", "sf", "spData", "stringi", "stringr", "TH.data", "tibble", "tidyr", "tinytex", "units", "vegan", "xfun", "XML", "zip"))
TreeClim <- readRDS('data/TreeClim.RDS')
library(sf)
library(raster)
library(rgdal)
library(velox)
library(lattice)
library(dplyr)
library(ggplot2)
#path = 'C:/a/geo/model/global/'
path = 'nam/'
treelist <- read.delim('treefiles.txt')
bt_frost <- read.delim('bt_frost2.txt')
kuchlermap <-read_sf('data/kuchler.shp')
forms <- read.delim('data/NorthAmericaGrowthHabits20180924.txt', encoding="Latin1")
syns <- read.delim('data/BONAPGRIN_NAMES.txt', encoding="UTF-8")
colnames(syns) <- c("Binomial","Taxon","B_Taxon","B_Binomial","G_Taxon","G_Binomial")
formsyns <- merge(syns, forms, by.x='Taxon', by.y='Scientific.Name')
formsyns <- unique(formsyns[!is.na(formsyns$B_Binomial) & !is.na(formsyns$HabitSymbol)& !formsyns$B_Binomial %in% "", c('HabitSymbol','B_Binomial')])
treelistsyns <- merge(treelist, syns, by.x='Latin.Name', by.y='Taxon', all.x=TRUE)
treelistsyns <- unique(treelistsyns[!is.na(treelistsyns$B_Binomial),c('name','B_Binomial')])
treelistforms <- merge(treelistsyns, formsyns, by='B_Binomial', all.x=TRUE)
BE <- as.character(unique(treelistforms[grepl('BE', treelistforms$HabitSymbol),'name']))
PALM <- as.character(unique(treelistforms[grepl('P', treelistforms$HabitSymbol),'name']))
BD <- as.character(unique(treelistforms[grepl('BD', treelistforms$HabitSymbol),'name']))
NE <- as.character(unique(treelistforms[grepl('NE', treelistforms$HabitSymbol)|grepl('ND', treelistforms$HabitSymbol),'name']))
SU <- as.character(unique(treelistforms[grepl('U', treelistforms$HabitSymbol),'name']))
unique(treelistforms$HabitSymbol)
Tclx <- raster(paste0(path, 'Tclx.tif'))
Tgs <- raster(paste0(path, 'Tgs.tif'))
Tc <- raster(paste0(path, 'Tc.tif'))
MAP <- raster(paste0(path, 'MAP.tif'))
Deficit <- raster(paste0(path, 'Deficit.tif'))
Surplus <- raster(paste0(path, 'Surplus.tif'))
pAET <- raster(paste0(path, 'pAET.tif'))
slope <- raster(paste0(path, 'slope.tif'))
sand <- raster(paste0(path, 'sand.tif'))
SoilpH <- raster(paste0(path, 'SoilpH.tif'))
hydric <- raster(paste0(path, 'hydric.tif'))
salids <- raster(paste0(path, 'salids.tif'))
Cindex <- min(Tclx+15, Tc)
M <- MAP/(Deficit + MAP - Surplus)
vTclx <- velox(Tclx)
vTgs <- velox(Tgs)
vTc <- velox(Tc)
vM <- velox(M)
vDeficit <- velox(Deficit)
vSurplus <- velox(Surplus)
vpAET <- velox(pAET)
vCindex<- velox(Cindex)
####
vslope <- velox(slope)
vsand <- velox(sand)
vSoilpH<- velox(SoilpH)
vhydric<- velox(hydric)
vsalids<- velox(salids)
install.packages(c("raster", "rgdal", "sf", "stringr"))
install.packages("st_rasterize")
install.packages("Rtools")
library(st_rasterize)
install.packages(c("caret", "dplyr", "ggplot2", "randomForest", "raster", "rgdal", "rpart.plot", "sf", "velox"))
install.packages(c("ape", "BiodiversityR", "plyr", "proxy", "vegan"))
install.packages(c("ggplot2", "sf", "shiny"))
install.packages("knitr")
install.packages(c("ape", "rms", "RODBC", "vegan"))
shiny::runApp('BiomeClimate')
a <- 37
b <- 73
c <- a-b
a <- 37
b <- 73
c <- b-b
a <- 37
b <- 73
c <- b-2
a <- c(37,8745,387287,37489,83714756)
b <- c(73,98615,68453,4865,498)
okthen <- cbind(a,b)
View(okthen)
okthen$a
okthen$ a
okthen <- as.data.frame(cbind(a,b))
okthen$ a
okthen$a
View(okthen)
a <- c(37,8745,387287,37489,83714756)
b <- c(73,98615,68453,4865,498)
okthen <- as.data.frame(cbind(a,b))
okthen$c <- okthen$a/okthen$b
c <- b-a
View(okthen)
a <- c(37,8,3,2,9)
b <- c(73,2,3,4,5)
okthen <- as.data.frame(cbind(a,b))
okthen$c <- okthen$a/okthen$b
c <- b-a
View(okthen)
computerpart <- c('gpu','cpu','psu','ram','mobo')
okthen <- cbind(okthen,computerpart)
computerpart <- c('gpu','cpu','psu','ram','mobo')
okthen <- cbind(okthen,computerpart)
computerpart <- c('gpu','cpu','psu','ram','mobo')
okthen <- cbind(okthen,computerpart)
View(okthen)
okthen[,1]
okthen[1,4]
okthen[,-c(5,6)]
okthen[,-c(5,6)]
okthen[,-c(5,6)]
okthen <- okthen[,-c(5,6)]
sum(okthen$a)
min(okthen$a)
max(okthen$a)
mean(okthen$a)
length(okthen$a)
shiny::runApp('BioClimR')
shiny::runApp()
library(rpart)
library(ggplot2)
library(rpart.plot)
library(plyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
XtremLow <- function(Tcl, Lat, Lon, Elev){
pacificsouth <- 1/((((Lat - -22.7)/13)^2 + ((Lon - -82.3)/14)^2)^2+1)
amazon2 <- 1/((((Lat - -10.2)/5)^2 + ((Lon - -59.9)/10)^2)^2+1)
amazon1 <- 1/((((Lat - -2.8)/14)^2 + ((Lon - -61.3)/19)^2)^2+1)
pacificcent <- 1/((((Lat - 4.1)/21)^2 + ((Lon - -122.4)/41)^2)^2+1)
mexico <- 1/((((Lat - 26)/6)^2 + ((Lon - -98.4)/12)^2)^2+1)
florida <- 1/((((Lat - 27.5)/4)^2 + ((Lon - -81.1)/8)^2)^2+1)
pacificnorth <- 1/((((Lat - 32.9)/26)^2 + ((Lon - -145)/27)^2)^2+1)
oklahoma <- 1/((((Lat - 33.6)/4)^2 + ((Lon - -98.4)/8)^2)^2+1)
arizona <- 1/((((Lat - 34)/12)^2 + ((Lon - -113.1)/8)^2)^2+1)
atlantic <- 1/((((Lat - 34)/15)^2 + ((Lon - -60.7)/19)^2)^2+1)
himalayas <- 1/((((Lat - 35.3)/6)^2 + ((Lon - 91.3)/13)^2)^2+1)
kentucky <- 1/((((Lat - 38.5)/3)^2 + ((Lon - -87.6)/9)^2)^2+1)
detroit <- 1/((((Lat - 41.8)/3)^2 + ((Lon - -82.6)/4)^2)^2+1)
ontario <- 1/((((Lat - 44.6)/2)^2 + ((Lon - -79.2)/6)^2)^2+1)
montana <- 1/((((Lat - 45.4)/5)^2 + ((Lon - -111.8)/10)^2)^2+1)
minn <- 1/((((Lat - 47.6)/6)^2 + ((Lon - -92.6)/12)^2)^2+1)
hudson <- 1/((((Lat - 60)/7)^2 + ((Lon - -87)/34)^2)^2+1)
siberia <- 1/((((Lat - 61.2)/20)^2 + ((Lon - 105.7)/39)^2)^2+1)
california <- 1/((((Lat - 34.8)/9)^2 + ((Lon - -128.2)/9)^2)^2+1)
washington <- 1/((((Lat - 46)/5)^2 + ((Lon - -126.6)/5)^2)^2+1)
colorado <- 1/((((Lat - 38.3)/2)^2 + ((Lon - -108.8)/3)^2)^2+1)
hawaii <- 1/((((Lat - 21.3)/7)^2 + ((Lon - -157.5)/11)^2)^2+1)
chess <- 1/((((Lat - 37)/3)^2 + ((Lon - -74)/3)^2)^2+1)
Tclx<-	-9.171	+
Tcl *	1.202	+
Lat *	-0.04149	+
Elev *	0.0008691	+
Lat * Elev *	-0.00002455	+
pacificsouth *	-1.792	+
amazon2 *	2.573	+
amazon1 *	-1.014	+
pacificcent *	-0.749	+
mexico *	-0.8227	+
florida *	-3.557	+
pacificnorth *	-1.246	+
oklahoma *	0.1758	+
arizona *	2.605	+
chess *	0.8347	+
atlantic *	0.2967	+
himalayas *	-1.814	+
kentucky *	-2.644	+
detroit *	0	+
ontario *	-2.314	+
montana *	-4.415	+
minn *	1.136	+
hudson *	-5.154	+
siberia *	-3.797	+
california *	4.48	+
washington *	3.597	+
colorado *	1.458	+
hawaii *	6.673
return(Tclx)}
Days <- c(31.00, 28.25, 31.00, 30.00, 31.00, 30.00, 31.00, 31.00, 30.00, 31.00, 30.00, 31.00)
DayNumber <- c(16.000,45.625,75.250,106.125,136.250,166.750,197.250,228.250,258.750,289.250,319.750,350.250)
dcl <- 0.409*sin(2*3.141592*DayNumber/365-1.39)
GetSolarRad <- function(Month, Lat){
declination <- dcl[Month]
hs <- acos(pmin(pmax(-tan(Lat/360*2*3.141592) * tan(declination),-1),1))
Ra <- 117.5 * (hs*sin(Lat/360*2*3.141592)*sin(declination) +
cos(Lat/360*2*3.141592)*cos(declination)*sin(hs)) / 3.141592
return(Ra)
}
GetDayLength<- function(Month, Lat){
declination <- dcl[Month]
Dl <- ifelse(Lat + declination*360/2/3.141592 > 89.16924, 24, ifelse(Lat - declination*360/2/3.141592 >= 90, 0, (atan(-((sin(-0.83/360*2*3.141592)-sin(declination)*sin(Lat/360*2*3.141592))/(cos(declination)*cos(Lat/360*2*3.141592)))/(-((sin(-0.83/360*2*3.141592)-sin(declination)*sin(Lat/360*2*3.141592))/(cos(declination)*cos(Lat/360*2*3.141592)))*((sin(-0.83/360*2*3.141592)-sin(declination)*sin(Lat/360*2*3.141592))/(cos(declination)*cos(Lat/360*2*3.141592)))+1)^0.5)+2*atan(1))/3.141592*24))
return(Dl)}
GetVp  <- function(p,th,tl) {#Based on linear regression using 10 minute WorldClim 2.0 data with vapor pressure estimates
Vpmax = 0.6108*exp(17.27*th/(th+237.3)) #saturation vapor pressure kPa
Vpmin = 0.6108*exp(17.27*tl/(tl+237.3)) #saturation vapor pressure kPa
Vp0 <- (Vpmin*7.976e-01+
Vpmin*log(p+1)*9.499e-02+
Vpmin*Vpmax*-6.599e-02)
Vp <- pmax(0,pmin(Vpmin,Vp0))
return(Vp)}
GetSolar <- function(Ra, Elev, th, tl, p) {#Based on linear regression using 10 minute WorldClim 2.0 data with solar radiation estimates
Rso <- (0.75+2*10^-5*Elev)*Ra
Rs0 <- (Rso*9.521e-01+
Rso*log(p+1)*-9.087e-02+
Rso*tl*-3.644e-03+
Rso*log(p+1)*th*1.335e-03)
Rs <- pmax(0.3*Rso,pmin(Rso,Rs0))
return(Rs)}
GetPET <- function(Ra, th, tl, p){
Vpmax = 0.6108*exp(17.27*th/(th+237.3)) #saturation vapor pressure kPa
Vpmin = 0.6108*exp(17.27*tl/(tl+237.3)) #saturation vapor pressure kPa
logp <- log(p+1)
e0 <- Ra*1.398767+
Vpmax*23.871874+
Vpmin*-17.767376+
logp*-3.369590+
Ra*Vpmax*0.186131
e <- pmax(0,e0)
return(e)}
GetNetSolar <- function(Ra, Elev, th, tl, p){
Vp = GetVp(p,th,tl)
Rso <- (0.75+2*10^-5*Elev)*Ra
Rs <- GetSolar(Ra, Elev, th, tl, p)
Rnl <- 4.901*10^-9 * (1.35*Rs/(Rso+0.000001)-0.35) * (0.34 - 0.14 * Vp^0.5) * ((th+273.16)^4 + (tl+273.16)^4)/2
Rns <- (1-0.23)*Rs
Rn <- pmax(0,Rns - Rnl)
return(Rn)}
GetTransGrow <- function(th, tl) {#Adjust to reduction in transpiration due to cold, with evaporation only outside growing season
b = 2 #spacer number making the temperature range wider
ts = 0.8 #assumed T/ET ratio during growing season
tw = 0.1 #assumed T/ET ratio during freezing season
G0 <- (th-0+b/2)/(th-tl+b)
G1 <- pmin(1,pmax(0,G0)) #proportion of monthly temperature above freezing considering daily temperature range
evmin = (tw)+(1-ts)
G = G1*(1-evmin)+evmin
return(G)}
Biomeclimate <- readRDS(file='data/RadBiomeclimate.RDS')
t. = grep("^t01$", colnames(Biomeclimate)):grep("^t12$", colnames(Biomeclimate))
th. = grep("^th01$", colnames(Biomeclimate)):grep("^th12$", colnames(Biomeclimate))
tl. = grep("^tl01$", colnames(Biomeclimate)):grep("^tl12$", colnames(Biomeclimate))
p. = grep("^p01$", colnames(Biomeclimate)):grep("^p12$", colnames(Biomeclimate))
e. = grep("^e01$", colnames(Biomeclimate)):grep("^e12$", colnames(Biomeclimate))
#PET and derivatives
for (i in 1:12){#i=1
Biomeclimate[,e.[i]] <- GetTransGrow(Biomeclimate[,th.[i]], Biomeclimate[,tl.[i]])*
GetPET(GetSolarRad(i,Biomeclimate$Latitude), Biomeclimate[,th.[i]], Biomeclimate[,tl.[i]], Biomeclimate[,p.[i]])
}
Biomeclimate$pAET <- pmin(Biomeclimate[,e.[1]], Biomeclimate[,p.[1]])
for(i in 1:12){
Biomeclimate$var <- pmin(Biomeclimate[,e.[i]], Biomeclimate[,p.[i]])
Biomeclimate$pAET <- pmax(Biomeclimate$pAET, Biomeclimate$var)
};Biomeclimate$var = NULL
Biomeclimate$Surplus <- 0
for(i in 1:12){
Biomeclimate$var <- pmax(0,Biomeclimate[,p.[i]]-Biomeclimate[,e.[i]])
Biomeclimate$Surplus <- Biomeclimate$Surplus+Biomeclimate$var
};Biomeclimate$var = NULL
Biomeclimate$Deficit <- 0
for(i in 1:12){
Biomeclimate$var <- pmax(0,Biomeclimate[,e.[i]]-Biomeclimate[,p.[i]])
Biomeclimate$Deficit <- Biomeclimate$Deficit+Biomeclimate$var
};Biomeclimate$var = NULL
#Tg
Biomeclimate$TgA <- 0
Biomeclimate$TgB <- 0
monthsA <- c(1,2,3,4,11,12)
monthsB <- c(5,6,7,8,9,10)
for(i in 1:6){
Biomeclimate$varA <- pmax(0, Biomeclimate[,t.[monthsA[i]]])
Biomeclimate$TgA <- Biomeclimate$TgA+Biomeclimate$varA
Biomeclimate$varB <- pmax(0, Biomeclimate[,t.[monthsB[i]]])
Biomeclimate$TgB <- Biomeclimate$TgB+Biomeclimate$varB
}
Biomeclimate$Tg <- pmax(Biomeclimate$TgA,Biomeclimate$TgB)/6
Biomeclimate$varA=NULL;Biomeclimate$TgA=NULL;Biomeclimate$varB=NULL;Biomeclimate$TgB=NULL
#Twh
Biomeclimate$Twh <- apply(Biomeclimate[,th.[1:12]], MARGIN = 1, FUN = 'max')
#Tw
Biomeclimate$Tw <- apply(Biomeclimate[,t.[1:12]], MARGIN = 1, FUN = 'max')
#Tc
Biomeclimate$Tc <- apply(Biomeclimate[,t.[1:12]], MARGIN = 1, FUN = 'min')
#Tcl
Biomeclimate$Tcl <- apply(Biomeclimate[,tl.[1:12]], MARGIN = 1, FUN = 'min')
#Tclx
Biomeclimate$Tclx <- XtremLow(Biomeclimate$Tcl, Biomeclimate$Latitude, Biomeclimate$Longitude, Biomeclimate$Elevation)
unique(Biomeclimate[,c('BIOME', 'biomname')])
Biomeclimate$PET <- apply(Biomeclimate[,which(colnames(Biomeclimate)=='e01'):which(colnames(Biomeclimate)=='e12')], MARGIN = 1, FUN='sum')
Biomeclimate$MAP <- apply(Biomeclimate[,which(colnames(Biomeclimate)=='p01'):which(colnames(Biomeclimate)=='p12')], MARGIN = 1, FUN='sum')
Biomeclimate$MAAT <- apply(Biomeclimate[,which(colnames(Biomeclimate)=='t01'):which(colnames(Biomeclimate)=='t12')], MARGIN = 1, FUN='mean')
Biomeclimate$M <- (Biomeclimate$MAP/Biomeclimate$PET +0.0001)
Biomeclimate$Cindex <- pmin(Biomeclimate$Tc,Biomeclimate$Tclx+15)
Biomeclimate$Deficit <- pmin(200, Biomeclimate$Deficit)
Biomeclimate$Surplus <- pmin(200, Biomeclimate$Surplus)
selectBiome<-subset(Biomeclimate, BIOME %in% c(1,2,4,5,6,7,8,10,11,12,13))
selectBiomecount<-aggregate(selectBiome$ECO_NAME, by=list(selectBiome$biomname),FUN=length)
colnames(selectBiomecount)<-c("biomname","x")
selectBiomecount$wt <- 1/(selectBiomecount$x+1)
selectBiome<-merge(selectBiome,selectBiomecount, by="biomname")
colnames(selectBiome)
biomeclass <- rpart(biomname ~  Tg + Cindex +  M + Deficit + Surplus + pAET, data = selectBiome,weights=selectBiome$wt, method="class", control = list(maxdepth = 5, cp=0.0005, minsplit=100))
# Make plot
png(filename="biomeclass.png",width = 10, height = 3, units = 'in', res = 600)
rpart.plot(biomeclass, extra=108) # Make plot
dev.off()
